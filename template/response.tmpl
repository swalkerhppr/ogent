{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "ogent/responses" }}
{{- with extend $ "Package" "ogent" }}{{ template "header" . }}{{ end }}

import "{{ $.Config.Package }}"

{{- range $n, $v := $.Config.Annotations.Ogent.Views }}
	{{- $n = replaceAll $n "_" "" }}
	{{- $pkg := base $.Config.Package }}
	func New{{ $n }}(e *{{ $pkg }}.{{ $v.Type.Name }}) *{{ $n }} {
		if e == nil {
			return nil
		}
		var ret {{ $n }}
		{{- range $f := $v.Fields }}
			{{- $a := fieldAnnotation $f }}
			{{- if or (not $a) (not $a.Skip) }}
				{{ setFieldExpr $f $n "ret" "e" }}
			{{- end }}
		{{- end }}
		{{- range $e := $v.Edges }}
			{{- $a := edgeAnnotation $e }}
			{{- if not $a.Skip }}
				{{- $vn := replaceAll (viewNameEdge $n $e) "_" "" }}
				ret.{{ $e.StructField }}= New{{ if $e.Unique -}}
					{{ $vn }}
				{{- else -}}
					{{ $vn | plural }}
				{{- end }}(e.Edges.{{ $e.StructField }})
				{{- if not $e.Optional}}.Elem(){{ end }}
			{{- end }}
		{{- end }}
		return &ret
	}

	func New{{ $n | plural }}(es []*{{ $pkg }}.{{ $v.Type.Name }}) []{{ $n }} {
		if len(es) == 0 {
			return nil
		}
		r := make([]{{ $n }}, len(es))
		for i, e := range es {
			r[i] = New{{ $n }}(e).Elem()
		}
		return r
	}

	func ({{ $v.Type.Receiver }} *{{ $n }}) Elem() {{ $n }} {
		if {{ $v.Type.Receiver }} == nil {
			return {{ $n }}{}
		}
		return *{{ $v.Type.Receiver }}
	}
{{ end }}
{{ end }}
