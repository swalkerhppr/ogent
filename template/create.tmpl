{{ define "ogent/ogent/helper/create" }}{{/* gotype: entgo.io/ent/entc/gen.Type */}}
	b := h.client.{{ $.Name }}.Create()
	// Add all fields.
	{{- range $f := $.Fields }}
		{{- $a := fieldAnnotation $f }}
		{{- if or (not $a) (not (or $a.ReadOnly $a.Skip)) }}
			{{- if $f.Optional }}
				{{- if or $f.IsBytes }}
					if req.{{ $f | ogenStructField }} != nil {
						b.Set{{ $f.StructField }}(req.{{ $f | ogenStructField }})
					}
				{{- else }}
					if v, ok := req.{{ $f | ogenStructField}}.Get(); ok {
						{{- $x := "v" }}
						{{- if $f.IsEnum -}}
							{{ $x = convertTo $f.Type.String $x }}
						{{- else -}}
							{{ $x = ogenToEnt $f $x }}
						{{- end }}
						b.Set{{ $f.StructField }}({{ $x }})
					}
				{{- end }}
			{{- else }}
				{{ if $f.IsEnum -}}
					b.Set{{ $f.StructField }}({{ $f.Type.String }}(req.{{ $f | ogenStructField }}))
				{{- else -}}
					b.Set{{ $f.StructField }}({{ $f | ogenStructField | print "req." | ogenToEnt $f }})
				{{- end }}
			{{- end }}
		{{- end }}
	{{- end }}
	// Add all edges.
	{{- range $e := $.Edges }}
		{{- $a := edgeAnnotation $e }}
		{{- if not $a.Skip }}
			{{- if not $e.Unique }}
				b.{{ $e.MutationAdd }}(req.{{ $e.StructField }}...)
			{{- else }}
				{{- if $e.Optional }}
					if v, ok := req.{{ $e.StructField }}.Get(); ok {
						b.{{ $e.MutationSet }}(v)
					}
				{{- else }}
					b.{{ $e.MutationSet }}(req.{{ $e.StructField }})
				{{- end }}
			{{- end }}
		{{- end }}
	{{- end }}
	// Persist to storage.
	e, err := b.Save(ctx)
	{{-
		template "ogent/ogent/helper/error"
		extend $
		"Errors" (list "not-singular" "constraint")
	-}}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.{{ $.Name }}.Query().Where({{ $.Package }}.ID(e.{{ $.ID.StructField }}))
	{{- with eagerLoad $ "create" }}
		// Eager load edges that are required on create operation.
		q{{ . }}
	{{- end }}
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return New{{ viewName $ "create"  }}(e), nil
{{- end }}
